import { ControlValueAccessor, NgForm, NgControl, FormGroupDirective } from '@angular/forms';
import { OnInit, EventEmitter, ElementRef, OnChanges, Renderer2, AfterViewInit, OnDestroy, SimpleChanges, NgZone } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { MatFormFieldControl, MatFormField } from '@angular/material/form-field';
import { ClockMode } from './interfaces-and-types';
import { Subject } from 'rxjs';
import { FocusMonitor } from '@angular/cdk/a11y';
import { ErrorStateMatcher } from '@angular/material/core';
import { Platform } from '@angular/cdk/platform';
import * as ɵngcc0 from '@angular/core';
export declare class MatTimepickerDirective implements OnInit, OnChanges, AfterViewInit, OnDestroy, ControlValueAccessor, MatFormFieldControl<any> {
    ngControl: NgControl;
    dialog: MatDialog;
    private renderer;
    private zone;
    private fm;
    private elRef;
    private ngZone;
    protected _platform: Platform;
    private _parentForm;
    private _matFormFiled;
    private _parentFormGroup;
    static nextId: number;
    /** Whether the component is being rendered on the server. */
    readonly _isServer: boolean;
    _errorState: boolean;
    get errorState(): boolean;
    get disabled(): boolean;
    set disabled(value: boolean);
    protected _disabled: boolean;
    get id(): string;
    set id(value: string);
    protected _id: string;
    get readonly(): boolean;
    set readonly(value: boolean);
    private _readonly;
    private isAlive;
    stateChanges: Subject<void>;
    protected _uid: string;
    get shouldLabelFloat(): boolean;
    describedBy: string;
    errorStateMatcher: ErrorStateMatcher;
    get required(): boolean;
    set required(req: boolean);
    private _required;
    get placeholder(): string;
    set placeholder(plh: string);
    private _placeholder;
    focused: boolean;
    private pattern;
    private allowed24HourMap;
    private allowed12HourMap;
    private isInputFocused;
    /** Override the label of the ok button. */
    okLabel: string;
    /** Override the label of the cancel button. */
    cancelLabel: string;
    /** Sets the clock mode, 12-hour or 24-hour clocks are supported. */
    mode: ClockMode;
    color: string;
    disableDialogOpenOnClick: boolean;
    strict: boolean;
    controlType: string;
    private listeners;
    minDate: Date;
    maxDate: Date;
    private _isPm;
    private _value;
    private _formattedValueString;
    private _skipValueChangeEmission;
    set value(value: Date);
    get value(): Date;
    get isPm(): boolean;
    get empty(): boolean;
    private get formattedValueString();
    private currentValue;
    private modalRef;
    private onChangeFn;
    private onTouchedFn;
    private combination;
    timeChange: EventEmitter<any>;
    invalidInput: EventEmitter<any>;
    inputHandler(): void;
    keydownHandler(event: any): boolean;
    keyupHandler(event: any): void;
    focusHandler(): void;
    focusoutHandler(): void;
    constructor(ngControl: NgControl, dialog: MatDialog, renderer: Renderer2, zone: NgZone, fm: FocusMonitor, elRef: ElementRef<HTMLElement>, ngZone: NgZone, _platform: Platform, _parentForm: NgForm, _matFormFiled: MatFormField, _parentFormGroup: FormGroupDirective, _defaultErrorStateMatcher: ErrorStateMatcher);
    setDescribedByIds(ids: string[]): void;
    onContainerClick(event: MouseEvent): void;
    setInputElementValue(value: any): void;
    validate(): {
        dateRange: boolean;
    };
    ngAfterViewInit(): void;
    clickHandler: (e: FocusEvent) => void;
    ngOnInit(): void;
    generateAllowedMap(): void;
    ngOnChanges(simpleChanges: SimpleChanges): void;
    checkValidity(value: Date): boolean;
    writeValue(value: Date, isInnerCall?: boolean): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState?(isDisabled: boolean): void;
    showDialog(): void;
    handleChange: (newValue: any) => void;
    handleOk: () => void;
    handleCancel: () => void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MatTimepickerDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<MatTimepickerDirective, "input[matTimepicker]", ["matTimepicker"], {
    "okLabel": "okLabel";
    "cancelLabel": "cancelLabel";
    "mode": "mode";
    "color": "color";
    "disableDialogOpenOnClick": "disableDialogOpenOnClick";
    "strict": "strict";
    "id": "id";
    "errorStateMatcher": "errorStateMatcher";
    "disabled": "disabled";
    "readonly": "readonly";
    "required": "required";
    "placeholder": "placeholder";
    "value": "value";
    "minDate": "minDate";
    "maxDate": "maxDate";
}, {
    "timeChange": "timeChange";
    "invalidInput": "invalidInput";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXBpY2tlci5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsidGltZXBpY2tlci5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgTmdGb3JtLCBOZ0NvbnRyb2wsIEZvcm1Hcm91cERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IE9uSW5pdCwgRXZlbnRFbWl0dGVyLCBFbGVtZW50UmVmLCBPbkNoYW5nZXMsIFJlbmRlcmVyMiwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95LCBTaW1wbGVDaGFuZ2VzLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdERpYWxvZyB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2RpYWxvZyc7XG5pbXBvcnQgeyBNYXRGb3JtRmllbGRDb250cm9sLCBNYXRGb3JtRmllbGQgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9mb3JtLWZpZWxkJztcbmltcG9ydCB7IENsb2NrTW9kZSB9IGZyb20gJy4vaW50ZXJmYWNlcy1hbmQtdHlwZXMnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRm9jdXNNb25pdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2ExMXknO1xuaW1wb3J0IHsgRXJyb3JTdGF0ZU1hdGNoZXIgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9jb3JlJztcbmltcG9ydCB7IFBsYXRmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BsYXRmb3JtJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE1hdFRpbWVwaWNrZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95LCBDb250cm9sVmFsdWVBY2Nlc3NvciwgTWF0Rm9ybUZpZWxkQ29udHJvbDxhbnk+IHtcbiAgICBuZ0NvbnRyb2w6IE5nQ29udHJvbDtcbiAgICBkaWFsb2c6IE1hdERpYWxvZztcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgem9uZTtcbiAgICBwcml2YXRlIGZtO1xuICAgIHByaXZhdGUgZWxSZWY7XG4gICAgcHJpdmF0ZSBuZ1pvbmU7XG4gICAgcHJvdGVjdGVkIF9wbGF0Zm9ybTogUGxhdGZvcm07XG4gICAgcHJpdmF0ZSBfcGFyZW50Rm9ybTtcbiAgICBwcml2YXRlIF9tYXRGb3JtRmlsZWQ7XG4gICAgcHJpdmF0ZSBfcGFyZW50Rm9ybUdyb3VwO1xuICAgIHN0YXRpYyBuZXh0SWQ6IG51bWJlcjtcbiAgICAvKiogV2hldGhlciB0aGUgY29tcG9uZW50IGlzIGJlaW5nIHJlbmRlcmVkIG9uIHRoZSBzZXJ2ZXIuICovXG4gICAgcmVhZG9ubHkgX2lzU2VydmVyOiBib29sZWFuO1xuICAgIF9lcnJvclN0YXRlOiBib29sZWFuO1xuICAgIGdldCBlcnJvclN0YXRlKCk6IGJvb2xlYW47XG4gICAgZ2V0IGRpc2FibGVkKCk6IGJvb2xlYW47XG4gICAgc2V0IGRpc2FibGVkKHZhbHVlOiBib29sZWFuKTtcbiAgICBwcm90ZWN0ZWQgX2Rpc2FibGVkOiBib29sZWFuO1xuICAgIGdldCBpZCgpOiBzdHJpbmc7XG4gICAgc2V0IGlkKHZhbHVlOiBzdHJpbmcpO1xuICAgIHByb3RlY3RlZCBfaWQ6IHN0cmluZztcbiAgICBnZXQgcmVhZG9ubHkoKTogYm9vbGVhbjtcbiAgICBzZXQgcmVhZG9ubHkodmFsdWU6IGJvb2xlYW4pO1xuICAgIHByaXZhdGUgX3JlYWRvbmx5O1xuICAgIHByaXZhdGUgaXNBbGl2ZTtcbiAgICBzdGF0ZUNoYW5nZXM6IFN1YmplY3Q8dm9pZD47XG4gICAgcHJvdGVjdGVkIF91aWQ6IHN0cmluZztcbiAgICBnZXQgc2hvdWxkTGFiZWxGbG9hdCgpOiBib29sZWFuO1xuICAgIGRlc2NyaWJlZEJ5OiBzdHJpbmc7XG4gICAgZXJyb3JTdGF0ZU1hdGNoZXI6IEVycm9yU3RhdGVNYXRjaGVyO1xuICAgIGdldCByZXF1aXJlZCgpOiBib29sZWFuO1xuICAgIHNldCByZXF1aXJlZChyZXE6IGJvb2xlYW4pO1xuICAgIHByaXZhdGUgX3JlcXVpcmVkO1xuICAgIGdldCBwbGFjZWhvbGRlcigpOiBzdHJpbmc7XG4gICAgc2V0IHBsYWNlaG9sZGVyKHBsaDogc3RyaW5nKTtcbiAgICBwcml2YXRlIF9wbGFjZWhvbGRlcjtcbiAgICBmb2N1c2VkOiBib29sZWFuO1xuICAgIHByaXZhdGUgcGF0dGVybjtcbiAgICBwcml2YXRlIGFsbG93ZWQyNEhvdXJNYXA7XG4gICAgcHJpdmF0ZSBhbGxvd2VkMTJIb3VyTWFwO1xuICAgIHByaXZhdGUgaXNJbnB1dEZvY3VzZWQ7XG4gICAgLyoqIE92ZXJyaWRlIHRoZSBsYWJlbCBvZiB0aGUgb2sgYnV0dG9uLiAqL1xuICAgIG9rTGFiZWw6IHN0cmluZztcbiAgICAvKiogT3ZlcnJpZGUgdGhlIGxhYmVsIG9mIHRoZSBjYW5jZWwgYnV0dG9uLiAqL1xuICAgIGNhbmNlbExhYmVsOiBzdHJpbmc7XG4gICAgLyoqIFNldHMgdGhlIGNsb2NrIG1vZGUsIDEyLWhvdXIgb3IgMjQtaG91ciBjbG9ja3MgYXJlIHN1cHBvcnRlZC4gKi9cbiAgICBtb2RlOiBDbG9ja01vZGU7XG4gICAgY29sb3I6IHN0cmluZztcbiAgICBkaXNhYmxlRGlhbG9nT3Blbk9uQ2xpY2s6IGJvb2xlYW47XG4gICAgc3RyaWN0OiBib29sZWFuO1xuICAgIGNvbnRyb2xUeXBlOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBsaXN0ZW5lcnM7XG4gICAgbWluRGF0ZTogRGF0ZTtcbiAgICBtYXhEYXRlOiBEYXRlO1xuICAgIHByaXZhdGUgX2lzUG07XG4gICAgcHJpdmF0ZSBfdmFsdWU7XG4gICAgcHJpdmF0ZSBfZm9ybWF0dGVkVmFsdWVTdHJpbmc7XG4gICAgcHJpdmF0ZSBfc2tpcFZhbHVlQ2hhbmdlRW1pc3Npb247XG4gICAgc2V0IHZhbHVlKHZhbHVlOiBEYXRlKTtcbiAgICBnZXQgdmFsdWUoKTogRGF0ZTtcbiAgICBnZXQgaXNQbSgpOiBib29sZWFuO1xuICAgIGdldCBlbXB0eSgpOiBib29sZWFuO1xuICAgIHByaXZhdGUgZ2V0IGZvcm1hdHRlZFZhbHVlU3RyaW5nKCk7XG4gICAgcHJpdmF0ZSBjdXJyZW50VmFsdWU7XG4gICAgcHJpdmF0ZSBtb2RhbFJlZjtcbiAgICBwcml2YXRlIG9uQ2hhbmdlRm47XG4gICAgcHJpdmF0ZSBvblRvdWNoZWRGbjtcbiAgICBwcml2YXRlIGNvbWJpbmF0aW9uO1xuICAgIHRpbWVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGludmFsaWRJbnB1dDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgaW5wdXRIYW5kbGVyKCk6IHZvaWQ7XG4gICAga2V5ZG93bkhhbmRsZXIoZXZlbnQ6IGFueSk6IGJvb2xlYW47XG4gICAga2V5dXBIYW5kbGVyKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIGZvY3VzSGFuZGxlcigpOiB2b2lkO1xuICAgIGZvY3Vzb3V0SGFuZGxlcigpOiB2b2lkO1xuICAgIGNvbnN0cnVjdG9yKG5nQ29udHJvbDogTmdDb250cm9sLCBkaWFsb2c6IE1hdERpYWxvZywgcmVuZGVyZXI6IFJlbmRlcmVyMiwgem9uZTogTmdab25lLCBmbTogRm9jdXNNb25pdG9yLCBlbFJlZjogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sIG5nWm9uZTogTmdab25lLCBfcGxhdGZvcm06IFBsYXRmb3JtLCBfcGFyZW50Rm9ybTogTmdGb3JtLCBfbWF0Rm9ybUZpbGVkOiBNYXRGb3JtRmllbGQsIF9wYXJlbnRGb3JtR3JvdXA6IEZvcm1Hcm91cERpcmVjdGl2ZSwgX2RlZmF1bHRFcnJvclN0YXRlTWF0Y2hlcjogRXJyb3JTdGF0ZU1hdGNoZXIpO1xuICAgIHNldERlc2NyaWJlZEJ5SWRzKGlkczogc3RyaW5nW10pOiB2b2lkO1xuICAgIG9uQ29udGFpbmVyQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkO1xuICAgIHNldElucHV0RWxlbWVudFZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIHZhbGlkYXRlKCk6IHtcbiAgICAgICAgZGF0ZVJhbmdlOiBib29sZWFuO1xuICAgIH07XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgY2xpY2tIYW5kbGVyOiAoZTogRm9jdXNFdmVudCkgPT4gdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIGdlbmVyYXRlQWxsb3dlZE1hcCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKHNpbXBsZUNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIGNoZWNrVmFsaWRpdHkodmFsdWU6IERhdGUpOiBib29sZWFuO1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IERhdGUsIGlzSW5uZXJDYWxsPzogYm9vbGVhbik6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZDtcbiAgICBzZXREaXNhYmxlZFN0YXRlPyhpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZDtcbiAgICBzaG93RGlhbG9nKCk6IHZvaWQ7XG4gICAgaGFuZGxlQ2hhbmdlOiAobmV3VmFsdWU6IGFueSkgPT4gdm9pZDtcbiAgICBoYW5kbGVPazogKCkgPT4gdm9pZDtcbiAgICBoYW5kbGVDYW5jZWw6ICgpID0+IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbiJdfQ==