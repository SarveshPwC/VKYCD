import { __read } from "tslib";
export function twoDigits(n) {
    return n < 10 ? "0" + n : "" + n;
}
export function addDays(date, days) {
    var result = new Date(date);
    result.setDate(result.getDate() + days);
    return result;
}
export function convertHoursForMode(hour, mode) {
    var isPm = hour >= 12;
    if (mode === '24h') {
        return { hour: hour, isPm: isPm };
    }
    else if (hour === 0 || hour === 12) {
        return { hour: 12, isPm: isPm };
    }
    else if (hour < 12) {
        return { hour: hour, isPm: isPm };
    }
    return { hour: hour - 12, isPm: isPm };
}
function mod(a, b) {
    return a - Math.floor(a / b) * b;
}
export function getShortestAngle(from, to) {
    var difference = to - from;
    return from + mod(difference + 180, 360) - 180;
}
export function isDateInRange(minDate, maxDate, current) {
    var unixCurrentDate = +current;
    return (!minDate || +minDate <= unixCurrentDate) && (!maxDate || unixCurrentDate <= +maxDate);
}
export function isTimeInRange(minDate, maxDate, current) {
    if (minDate instanceof Date) {
        var newMinDate = new Date();
        newMinDate.setHours(minDate.getHours());
        newMinDate.setMinutes(minDate.getMinutes());
        newMinDate.setSeconds(0);
        newMinDate.setMilliseconds(0);
        minDate = newMinDate;
    }
    if (maxDate instanceof Date) {
        var newMaxDate = new Date();
        newMaxDate.setHours(maxDate.getHours());
        newMaxDate.setMinutes(maxDate.getMinutes());
        newMaxDate.setSeconds(0);
        newMaxDate.setMilliseconds(0);
        maxDate = newMaxDate;
    }
    if (current instanceof Date) {
        var newCurrent = new Date();
        newCurrent.setHours(current.getHours());
        newCurrent.setMinutes(current.getMinutes());
        newCurrent.setSeconds(0);
        newCurrent.setMilliseconds(0);
        current = newCurrent;
    }
    var unixCurrentDate = +current;
    return (!minDate || +minDate <= unixCurrentDate) && (!maxDate || unixCurrentDate <= +maxDate);
}
// used when generating the allowed maps
export function isAllowed(hour, minutes, minDate, maxDate, clockMode, selectedMeridiem) {
    if (hour > 24 || hour < 0 || minutes > 60 || minutes < 0) {
        return false;
    }
    if (!minDate && !maxDate) {
        return true;
    }
    if (clockMode === '12h') {
        if (hour === 12 && selectedMeridiem === 'AM') {
            hour = 0;
        }
        if (hour > 12) {
            hour -= 12;
        }
    }
    var checkDate = new Date();
    checkDate.setHours(hour);
    checkDate.setMinutes(minutes);
    checkDate.setSeconds(0);
    checkDate.setMilliseconds(0);
    return isDateInRange(minDate, maxDate, checkDate);
}
// used by the clock component to visually disable the not allowed values
export function getIsAvailabeFn(allowed12HourMap, allowed24HourMap, mode) {
    return function (value, viewType, isPm, h) {
        var isHourCheck = viewType === 'hours';
        var _a = __read(isHourCheck ? [value, null] : [h, value], 2), hour = _a[0], minutes = _a[1];
        if (mode === '12h') {
            if (!allowed12HourMap) {
                return true;
            }
            var meridiem = isPm ? 'pm' : 'am';
            if (isHourCheck) {
                return !!Object.values(allowed12HourMap[meridiem][hour]).find(function (v) { return v === true; });
            }
            return allowed12HourMap[meridiem][hour][minutes];
        }
        if (!allowed24HourMap) {
            return true;
        }
        if (isHourCheck) {
            return !!Object.values(allowed24HourMap[hour]).find(function (v) { return v === true; });
        }
        return allowed24HourMap[hour][minutes];
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL21hdC10aW1lcGlja2VyLyIsInNvdXJjZXMiOlsibGliL3V0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLE1BQU0sVUFBVSxTQUFTLENBQUMsQ0FBQztJQUN6QixPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQUksQ0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUcsQ0FBQztBQUNuQyxDQUFDO0FBRUQsTUFBTSxVQUFVLE9BQU8sQ0FBQyxJQUFVLEVBQUUsSUFBWTtJQUM5QyxJQUFNLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QixNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUN4QyxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBRUQsTUFBTSxVQUFVLG1CQUFtQixDQUFDLElBQVksRUFBRSxJQUFlO0lBQy9ELElBQU0sSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7SUFDeEIsSUFBSSxJQUFJLEtBQUssS0FBSyxFQUFFO1FBQ2xCLE9BQU8sRUFBRSxJQUFJLE1BQUEsRUFBRSxJQUFJLE1BQUEsRUFBRSxDQUFDO0tBQ3ZCO1NBQU0sSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksS0FBSyxFQUFFLEVBQUU7UUFDcEMsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsSUFBSSxNQUFBLEVBQUUsQ0FBQztLQUMzQjtTQUFNLElBQUksSUFBSSxHQUFHLEVBQUUsRUFBRTtRQUNwQixPQUFPLEVBQUUsSUFBSSxNQUFBLEVBQUUsSUFBSSxNQUFBLEVBQUUsQ0FBQztLQUN2QjtJQUNELE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxHQUFHLEVBQUUsRUFBRSxJQUFJLE1BQUEsRUFBRSxDQUFDO0FBQ25DLENBQUM7QUFFRCxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVB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LENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsS0FBSyxJQUFJLEVBQVYsQ0FBVSxDQUFDLENBQUM7YUFDaEY7WUFDRCxPQUFPLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ2xEO1FBRUQsSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQUUsT0FBTyxJQUFJLENBQUM7U0FBRTtRQUV2QyxJQUFJLFdBQVcsRUFBRTtZQUNmLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLEtBQUssSUFBSSxFQUFWLENBQVUsQ0FBQyxDQUFDO1NBQ3RFO1FBQ0QsT0FBTyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN6QyxDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVRpbWVEYXRhLCBDbG9ja1ZpZXdUeXBlLCBDbG9ja01vZGUgfSBmcm9tICcuL2ludGVyZmFjZXMtYW5kLXR5cGVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHR3b0RpZ2l0cyhuKSB7XG4gIHJldHVybiBuIDwgMTAgPyBgMCR7bn1gIDogYCR7bn1gO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkRGF5cyhkYXRlOiBEYXRlLCBkYXlzOiBudW1iZXIpIHtcbiAgY29uc3QgcmVzdWx0ID0gbmV3IERhdGUoZGF0ZSk7XG4gIHJlc3VsdC5zZXREYXRlKHJlc3VsdC5nZXREYXRlKCkgKyBkYXlzKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRIb3Vyc0Zvck1vZGUoaG91cjogbnVtYmVyLCBtb2RlOiBDbG9ja01vZGUpIHtcbiAgY29uc3QgaXNQbSA9IGhvdXIgPj0gMTI7XG4gIGlmIChtb2RlID09PSAnMjRoJykge1xuICAgIHJldHVybiB7IGhvdXIsIGlzUG0gfTtcbiAgfSBlbHNlIGlmIChob3VyID09PSAwIHx8IGhvdXIgPT09IDEyKSB7XG4gICAgcmV0dXJuIHsgaG91cjogMTIsIGlzUG0gfTtcbiAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICByZXR1cm4geyBob3VyLCBpc1BtIH07XG4gIH1cbiAgcmV0dXJuIHsgaG91cjogaG91ciAtIDEyLCBpc1BtIH07XG59XG5cbmZ1bmN0aW9uIG1vZChhLCBiKSB7XG4gIHJldHVybiBhIC0gTWF0aC5mbG9vcihhIC8gYikgKiBiO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2hvcnRlc3RBbmdsZShmcm9tLCB0bykge1xuICBjb25zdCBkaWZmZXJlbmNlID0gdG8gLSBmcm9tO1xuICByZXR1cm4gZnJvbSArIG1vZChkaWZmZXJlbmNlICsgMTgwLCAzNjApIC0gMTgwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEYXRlSW5SYW5nZShtaW5EYXRlOiBEYXRlLCBtYXhEYXRlOiBEYXRlLCBjdXJyZW50OiBEYXRlKSB7XG4gIGNvbnN0IHVuaXhDdXJyZW50RGF0ZSA9ICtjdXJyZW50O1xuICByZXR1cm4gKCFtaW5EYXRlIHx8ICttaW5EYXRlIDw9IHVuaXhDdXJyZW50RGF0ZSkgJiYgKCFtYXhEYXRlIHx8IHVuaXhDdXJyZW50RGF0ZSA8PSArbWF4RGF0ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1RpbWVJblJhbmdlKG1pbkRhdGU6IERhdGUsIG1heERhdGU6IERhdGUsIGN1cnJlbnQ6IERhdGUpIHtcbiAgaWYgKG1pbkRhdGUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgY29uc3QgbmV3TWluRGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgbmV3TWluRGF0ZS5zZXRIb3VycyhtaW5EYXRlLmdldEhvdXJzKCkpO1xuICAgIG5ld01pbkRhdGUuc2V0TWludXRlcyhtaW5EYXRlLmdldE1pbnV0ZXMoKSk7XG4gICAgbmV3TWluRGF0ZS5zZXRTZWNvbmRzKDApO1xuICAgIG5ld01pbkRhdGUuc2V0TWlsbGlzZWNvbmRzKDApO1xuICAgIG1pbkRhdGUgPSBuZXdNaW5EYXRlO1xuICB9XG4gIGlmIChtYXhEYXRlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgIGNvbnN0IG5ld01heERhdGUgPSBuZXcgRGF0ZSgpO1xuICAgIG5ld01heERhdGUuc2V0SG91cnMobWF4RGF0ZS5nZXRIb3VycygpKTtcbiAgICBuZXdNYXhEYXRlLnNldE1pbnV0ZXMobWF4RGF0ZS5nZXRNaW51dGVzKCkpO1xuICAgIG5ld01heERhdGUuc2V0U2Vjb25kcygwKTtcbiAgICBuZXdNYXhEYXRlLnNldE1pbGxpc2Vjb25kcygwKTtcbiAgICBtYXhEYXRlID0gbmV3TWF4RGF0ZTtcbiAgfVxuICBpZiAoY3VycmVudCBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICBjb25zdCBuZXdDdXJyZW50ID0gbmV3IERhdGUoKTtcbiAgICBuZXdDdXJyZW50LnNldEhvdXJzKGN1cnJlbnQuZ2V0SG91cnMoKSk7XG4gICAgbmV3Q3VycmVudC5zZXRNaW51dGVzKGN1cnJlbnQuZ2V0TWludXRlcygpKTtcbiAgICBuZXdDdXJyZW50LnNldFNlY29uZHMoMCk7XG4gICAgbmV3Q3VycmVudC5zZXRNaWxsaXNlY29uZHMoMCk7XG4gICAgY3VycmVudCA9IG5ld0N1cnJlbnQ7XG4gIH1cbiAgY29uc3QgdW5peEN1cnJlbnREYXRlID0gK2N1cnJlbnQ7XG4gIHJldHVybiAoIW1pbkRhdGUgfHwgK21pbkRhdGUgPD0gdW5peEN1cnJlbnREYXRlKSAmJiAoIW1heERhdGUgfHwgdW5peEN1cnJlbnREYXRlIDw9ICttYXhEYXRlKTtcbn1cblxuLy8gdXNlZCB3aGVuIGdlbmVyYXRpbmcgdGhlIGFsbG93ZWQgbWFwc1xuXG5leHBvcnQgZnVuY3Rpb24gaXNBbGxvd2VkKFxuICBob3VyOiBudW1iZXIsXG4gIG1pbnV0ZXM6IG51bWJlcixcbiAgbWluRGF0ZTogRGF0ZSxcbiAgbWF4RGF0ZTogRGF0ZSxcbiAgY2xvY2tNb2RlOiBDbG9ja01vZGUsXG4gIHNlbGVjdGVkTWVyaWRpZW0/OiAnQU0nIHwgJ1BNJ1xuKSB7XG4gIGlmIChob3VyID4gMjQgfHwgaG91ciA8IDAgfHwgbWludXRlcyA+IDYwIHx8IG1pbnV0ZXMgPCAwKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIGlmICghbWluRGF0ZSAmJiAhbWF4RGF0ZSkgeyByZXR1cm4gdHJ1ZTsgfVxuXG4gIGlmIChjbG9ja01vZGUgPT09ICcxMmgnKSB7XG4gICAgaWYgKGhvdXIgPT09IDEyICYmIHNlbGVjdGVkTWVyaWRpZW0gPT09ICdBTScpIHsgaG91ciA9IDA7IH1cbiAgICBpZiAoaG91ciA+IDEyKSB7IGhvdXIgLT0gMTI7IH1cbiAgfVxuICBjb25zdCBjaGVja0RhdGUgPSBuZXcgRGF0ZSgpO1xuXG4gIGNoZWNrRGF0ZS5zZXRIb3Vycyhob3VyKTtcbiAgY2hlY2tEYXRlLnNldE1pbnV0ZXMobWludXRlcyk7XG4gIGNoZWNrRGF0ZS5zZXRTZWNvbmRzKDApO1xuICBjaGVja0RhdGUuc2V0TWlsbGlzZWNvbmRzKDApO1xuXG4gIHJldHVybiBpc0RhdGVJblJhbmdlKG1pbkRhdGUsIG1heERhdGUsIGNoZWNrRGF0ZSk7XG59XG5cbi8vIHVzZWQgYnkgdGhlIGNsb2NrIGNvbXBvbmVudCB0byB2aXN1YWxseSBkaXNhYmxlIHRoZSBub3QgYWxsb3dlZCB2YWx1ZXNcblxuZXhwb3J0IGZ1bmN0aW9uIGdldElzQXZhaWxhYmVGbihhbGxvd2VkMTJIb3VyTWFwLCBhbGxvd2VkMjRIb3VyTWFwLCBtb2RlOiBDbG9ja01vZGUpIHtcbiAgcmV0dXJuICh2YWx1ZTogbnVtYmVyLCB2aWV3VHlwZTogQ2xvY2tWaWV3VHlwZSwgaXNQbTogYm9vbGVhbiwgaD86IG51bWJlcikgPT4ge1xuICAgIGNvbnN0IGlzSG91ckNoZWNrID0gdmlld1R5cGUgPT09ICdob3Vycyc7XG4gICAgY29uc3QgW2hvdXIsIG1pbnV0ZXNdID0gaXNIb3VyQ2hlY2sgPyBbdmFsdWUsIG51bGxdIDogW2gsIHZhbHVlXTtcblxuICAgIGlmIChtb2RlID09PSAnMTJoJykge1xuICAgICAgaWYgKCFhbGxvd2VkMTJIb3VyTWFwKSB7IHJldHVybiB0cnVlOyB9XG4gICAgICBjb25zdCBtZXJpZGllbSA9IGlzUG0gPyAncG0nIDogJ2FtJztcbiAgICAgIGlmIChpc0hvdXJDaGVjaykge1xuICAgICAgICByZXR1cm4gISFPYmplY3QudmFsdWVzKGFsbG93ZWQxMkhvdXJNYXBbbWVyaWRpZW1dW2hvdXJdKS5maW5kKHYgPT4gdiA9PT0gdHJ1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWxsb3dlZDEySG91ck1hcFttZXJpZGllbV1baG91cl1bbWludXRlc107XG4gICAgfVxuXG4gICAgaWYgKCFhbGxvd2VkMjRIb3VyTWFwKSB7IHJldHVybiB0cnVlOyB9XG5cbiAgICBpZiAoaXNIb3VyQ2hlY2spIHtcbiAgICAgIHJldHVybiAhIU9iamVjdC52YWx1ZXMoYWxsb3dlZDI0SG91ck1hcFtob3VyXSkuZmluZCh2ID0+IHYgPT09IHRydWUpO1xuICAgIH1cbiAgICByZXR1cm4gYWxsb3dlZDI0SG91ck1hcFtob3VyXVttaW51dGVzXTtcbiAgfTtcbn1cbiJdfQ==