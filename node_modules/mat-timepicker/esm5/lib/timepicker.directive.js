import { __decorate, __param, __read } from "tslib";
import { ControlValueAccessor, NgForm, NgControl, FormGroupDirective, FormControl } from '@angular/forms';
import { Directive, OnInit, EventEmitter, Input, ElementRef, OnChanges, Renderer2, AfterViewInit, OnDestroy, Optional, SimpleChanges, NgZone, HostBinding, Self, Output, HostListener } from '@angular/core';
import { MatDialog, MatDialogRef } from '@angular/material/dialog';
import { MatFormFieldControl, MatFormField } from '@angular/material/form-field';
import { twoDigits, convertHoursForMode, isAllowed, isDateInRange, isTimeInRange } from './util';
import { MatTimepickerComponentDialogComponent } from './timepicker-dialog/timepicker-dialog.component';
import { Subject } from 'rxjs';
import { takeUntil, first } from 'rxjs/operators';
import { FocusMonitor } from '@angular/cdk/a11y';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ErrorStateMatcher } from '@angular/material/core';
import { Platform } from '@angular/cdk/platform';
var MatTimepickerDirective = /** @class */ (function () {
    function MatTimepickerDirective(ngControl, dialog, renderer, zone, fm, elRef, ngZone, 
    // tslint:disable-next-line:variable-name
    _platform, 
    // tslint:disable-next-line:variable-name
    _parentForm, 
    // tslint:disable-next-line:variable-name
    _matFormFiled, 
    // tslint:disable-next-line:variable-name
    _parentFormGroup, 
    // tslint:disable-next-line:variable-name
    _defaultErrorStateMatcher) {
        var _this = this;
        this.ngControl = ngControl;
        this.dialog = dialog;
        this.renderer = renderer;
        this.zone = zone;
        this.fm = fm;
        this.elRef = elRef;
        this.ngZone = ngZone;
        this._platform = _platform;
        this._parentForm = _parentForm;
        this._matFormFiled = _matFormFiled;
        this._parentFormGroup = _parentFormGroup;
        // tslint:disable-next-line:variable-name
        this._errorState = false;
        // tslint:disable-next-line:variable-name
        this._disabled = false;
        // tslint:disable-next-line:variable-name
        this._readonly = false;
        this.isAlive = new Subject();
        this.stateChanges = new Subject();
        // tslint:disable-next-line:variable-name
        this._uid = "mat-input-" + MatTimepickerDirective_1.nextId++;
        this.describedBy = '';
        // tslint:disable-next-line:variable-name
        this._required = false;
        this.focused = false;
        this.allowed24HourMap = null;
        this.allowed12HourMap = null;
        this.isInputFocused = false;
        /** Override the label of the ok button. */
        this.okLabel = 'Ok';
        /** Override the label of the cancel button. */
        this.cancelLabel = 'Cancel';
        /** Sets the clock mode, 12-hour or 24-hour clocks are supported. */
        this.mode = '24h';
        this.color = 'primary';
        this.disableDialogOpenOnClick = false;
        this.strict = true;
        this.controlType = 'angular-material-timepicker';
        this.listeners = [];
        // tslint:disable-next-line:variable-name
        this._skipValueChangeEmission = true;
        this.combination = [];
        this.timeChange = new EventEmitter();
        this.invalidInput = new EventEmitter();
        this.clickHandler = function (e) {
            if ((_this.modalRef && _this.modalRef.componentInstance.isClosing) || _this.disabled || _this.disableDialogOpenOnClick) {
                return;
            }
            if (!_this.modalRef && !_this.disableDialogOpenOnClick) {
                _this.showDialog();
            }
        };
        this.handleChange = function (newValue) {
            if (!(newValue instanceof Date)) {
                return;
            }
            var v = _this.value instanceof Date ? new Date(_this.value.getTime()) : new Date();
            v.setHours(newValue.getHours());
            v.setMinutes(newValue.getMinutes());
            v.setSeconds(0);
            v.setMilliseconds(0);
            _this.currentValue = v;
        };
        this.handleOk = function () {
            if (_this.onChangeFn) {
                _this.onChangeFn(_this.currentValue);
            }
            _this.value = _this.currentValue;
            _this.modalRef.close();
        };
        this.handleCancel = function () {
            _this.modalRef.close();
        };
        this.id = this.id;
        this.errorStateMatcher = _defaultErrorStateMatcher;
        if (this.ngControl != null) {
            this.ngControl.valueAccessor = this;
        }
        if (_platform.IOS) {
            ngZone.runOutsideAngular(function () {
                elRef.nativeElement.addEventListener('keyup', function (event) {
                    var el = event.target;
                    if (!el.value && !el.selectionStart && !el.selectionEnd) {
                        // Note: Just setting `0, 0` doesn't fix the issue. Setting
                        // `1, 1` fixes it for the first time that you type text and
                        // then hold delete. Toggling to `1, 1` and then back to
                        // `0, 0` seems to completely fix it.
                        el.setSelectionRange(1, 1);
                        el.setSelectionRange(0, 0);
                    }
                });
            });
        }
        this._isServer = !this._platform.isBrowser;
    }
    MatTimepickerDirective_1 = MatTimepickerDirective;
    Object.defineProperty(MatTimepickerDirective.prototype, "errorState", {
        get: function () {
            var oldState = this._errorState;
            var parent = this._parentFormGroup || this._parentForm;
            var control = this.ngControl ? this.ngControl.control : null;
            var newState = this.errorStateMatcher ? this.errorStateMatcher.isErrorState(control, parent) : oldState;
            if (newState !== oldState) {
                this._errorState = newState;
                this.stateChanges.next();
            }
            return newState;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatTimepickerDirective.prototype, "disabled", {
        get: function () {
            if (this.ngControl && this.ngControl.disabled !== null) {
                return this.ngControl.disabled;
            }
            return this._disabled;
        },
        set: function (value) {
            this._disabled = coerceBooleanProperty(value);
            // Browsers may not fire the blur event if the input is disabled too quickly.
            // Reset from here to ensure that the element doesn't become stuck.
            if (this.focused) {
                this.focused = false;
                this.stateChanges.next();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatTimepickerDirective.prototype, "id", {
        get: function () { return this._id; },
        set: function (value) { this._id = value || this._uid; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatTimepickerDirective.prototype, "readonly", {
        get: function () { return this._readonly; },
        set: function (value) { this._readonly = coerceBooleanProperty(value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatTimepickerDirective.prototype, "shouldLabelFloat", {
        get: function () { return this.focused || !this.empty; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatTimepickerDirective.prototype, "required", {
        get: function () {
            return this._required;
        },
        set: function (req) {
            this._required = coerceBooleanProperty(req);
            this.stateChanges.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatTimepickerDirective.prototype, "placeholder", {
        get: function () {
            return this._placeholder;
        },
        set: function (plh) {
            this._placeholder = plh;
            this.stateChanges.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatTimepickerDirective.prototype, "value", {
        get: function () { return this._value; },
        set: function (value) {
            if (value === this._value) {
                return;
            }
            this._value = value;
            if (!value) {
                this._formattedValueString = null;
                this.setInputElementValue(value);
                this.currentValue = value;
                return;
            }
            var _a = convertHoursForMode(value.getHours(), this.mode), hour = _a.hour, isPm = _a.isPm;
            this._isPm = isPm;
            this._formattedValueString = this.mode === '12h' ?
                hour + ":" + twoDigits(value.getMinutes()) + " " + (isPm ? 'pm' : 'am') :
                twoDigits(value.getHours()) + ":" + twoDigits(value.getMinutes());
            if (!this.isInputFocused) {
                this.setInputElementValue(this.formattedValueString);
            }
            this.currentValue = value;
            this.stateChanges.next();
            if (this._skipValueChangeEmission) {
                return;
            }
            this.timeChange.emit(this.currentValue);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatTimepickerDirective.prototype, "isPm", {
        get: function () { return this._isPm; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatTimepickerDirective.prototype, "empty", {
        get: function () {
            return !(this.currentValue instanceof Date);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatTimepickerDirective.prototype, "formattedValueString", {
        get: function () { return this._formattedValueString; },
        enumerable: true,
        configurable: true
    });
    MatTimepickerDirective.prototype.inputHandler = function () {
        var _a, _b;
        var value = this.elRef.nativeElement.value;
        var length = value.length;
        if (length === 0) {
            this.writeValue(null, true);
            if (this.onChangeFn) {
                this.onChangeFn(null);
            }
            return;
        }
        var meridiemResult = value.match(/am|pm/i);
        var meridiem = null;
        if (meridiemResult) {
            value = value.replace(meridiemResult[0], '');
            _a = __read(meridiemResult, 1), meridiem = _a[0];
        }
        var valueHasColumn = value.includes(':');
        var _c = __read(length === 1 ? [value, 0] :
            length === 2 && !valueHasColumn ? [value, 0] : valueHasColumn ? value.split(':') : value.split(/(\d\d)/).filter(function (v) { return v; }), 2), hours = _c[0], minutes = _c[1];
        hours = +hours;
        if (/\s/.test(minutes)) {
            var other = void 0;
            _b = __read(minutes.split(/\s/), 2), minutes = _b[0], other = _b[1];
            if (other === 'pm' && !isNaN(hours) && hours < 12) {
                hours += 12;
            }
        }
        minutes = +minutes;
        if (isNaN(hours) || isNaN(minutes)) {
            this.writeValue(null, true);
            return;
        }
        if (hours < 12 && meridiem && meridiem.toLowerCase() === 'pm') {
            hours += 12;
        }
        else if (hours > 12 && meridiem && meridiem.toLowerCase() === 'am') {
            hours -= 12;
        }
        if (this.mode === '12h' && +hours < 1) {
            hours = '1';
        }
        else {
            if (+hours > 24) {
                hours = '24';
            }
            else if (+hours < 0) {
                hours = '0';
            }
        }
        if (+minutes > 59) {
            minutes = '59';
        }
        else if (+minutes < 0) {
            minutes = '0';
        }
        var d = this.value ? new Date(this.value.getTime()) : new Date();
        d.setHours(+hours);
        d.setMinutes(+minutes);
        d.setSeconds(0);
        d.setMilliseconds(0);
        var isValueInRange = isDateInRange(this.minDate, this.maxDate, d);
        if (!isValueInRange) {
            this.invalidInput.emit();
        }
        this.writeValue(d, true);
        if (this.onChangeFn) {
            this.onChangeFn(d);
        }
    };
    MatTimepickerDirective.prototype.keydownHandler = function (event) {
        if (event.metaKey || event.ctrlKey || event.altKey) {
            this.combination = this.combination.concat(event.code);
            return;
        }
        if (!/^[0-9a-zA-Z\s]{0,1}$/.test(event.key)) {
            return;
        }
        var target = event.target;
        var tValue = target.value;
        var value = "" + tValue.slice(0, target.selectionStart) + event.key + tValue.slice(target.selectionEnd);
        if (value.match(this.pattern) || this.combination.length > 0) {
            return true;
        }
        event.preventDefault();
        event.stopImmediatePropagation();
    };
    MatTimepickerDirective.prototype.keyupHandler = function (event) {
        this.combination = this.combination.filter(function (v) { return v !== event.code; });
    };
    MatTimepickerDirective.prototype.focusHandler = function () {
        this.isInputFocused = true;
    };
    MatTimepickerDirective.prototype.focusoutHandler = function () {
        this.isInputFocused = false;
        this.setInputElementValue(this.formattedValueString);
        if (this.onTouchedFn && !this.modalRef) {
            this.onTouchedFn();
        }
    };
    MatTimepickerDirective.prototype.setDescribedByIds = function (ids) {
        this.describedBy = ids.join(' ');
    };
    MatTimepickerDirective.prototype.onContainerClick = function (event) {
        if (event.target.tagName.toLowerCase() !== 'input') {
            this.elRef.nativeElement.focus();
        }
    };
    MatTimepickerDirective.prototype.setInputElementValue = function (value) {
        var _this = this;
        Promise.resolve().then(function () {
            _this.zone.runOutsideAngular(function () {
                _this.renderer.setProperty(_this.elRef.nativeElement, 'value', value);
            });
        });
    };
    MatTimepickerDirective.prototype.validate = function () {
        var isValueInRange = this.strict ?
            isDateInRange(this.minDate, this.maxDate, this.currentValue) :
            isTimeInRange(this.minDate, this.maxDate, this.currentValue);
        return isValueInRange ? null : { dateRange: true };
    };
    MatTimepickerDirective.prototype.ngAfterViewInit = function () {
        this.listeners.push(this.renderer.listen(this._matFormFiled ? this._matFormFiled._elementRef.nativeElement : this.elRef.nativeElement, 'click', this.clickHandler));
    };
    MatTimepickerDirective.prototype.ngOnInit = function () {
        var _this = this;
        if (this._platform.isBrowser) {
            this.fm.monitor(this.elRef.nativeElement, true).subscribe(function (origin) {
                _this.focused = !!origin;
                _this.stateChanges.next();
            });
        }
        if (!this.value) {
            var hasMaxDate = !!this.maxDate;
            var hasMinDate = !!this.minDate;
            if (hasMinDate || hasMaxDate) {
                if (hasMinDate) {
                    this.minDate.setSeconds(0);
                    this.minDate.setMilliseconds(0);
                }
                if (hasMaxDate) {
                    this.maxDate.setSeconds(0);
                    this.maxDate.setMilliseconds(0);
                }
                Promise.resolve().then(function () { return _this.generateAllowedMap(); });
                if (!this.ngControl._rawValidators.find(function (v) { return v === _this; })) {
                    this.ngControl._rawValidators.push(this);
                }
            }
        }
        this._skipValueChangeEmission = false;
    };
    MatTimepickerDirective.prototype.generateAllowedMap = function () {
        var isStrictMode = this.strict && this.value instanceof Date;
        if (this.mode === '24h') {
            this.allowed24HourMap = {};
            for (var h = 0; h < 24; h++) {
                for (var m = 0; m < 60; m++) {
                    var hourMap = this.allowed24HourMap[h] || {};
                    if (isStrictMode) {
                        var currentDate = new Date(this.value.getTime());
                        currentDate.setHours(h);
                        currentDate.setMinutes(m);
                        currentDate.setSeconds(0);
                        currentDate.setMilliseconds(0);
                        hourMap[m] = isDateInRange(this.minDate, this.maxDate, currentDate);
                    }
                    else {
                        hourMap[m] = isAllowed(h, m, this.minDate, this.maxDate, '24h');
                    }
                    this.allowed24HourMap[h] = hourMap;
                }
            }
        }
        else {
            this.allowed12HourMap = { am: {}, pm: {} };
            for (var h = 0; h < 24; h++) {
                var meridiem = h < 12 ? 'am' : 'pm';
                for (var m = 0; m < 60; m++) {
                    var hour = (h > 12 ? h - 12 : h === 0 ? 12 : h);
                    var hourMap = this.allowed12HourMap[meridiem][hour] || {};
                    if (isStrictMode) {
                        var currentDate = new Date(this.value.getTime());
                        currentDate.setHours(h);
                        currentDate.setMinutes(m);
                        currentDate.setSeconds(0);
                        currentDate.setMilliseconds(0);
                        hourMap[m] = isDateInRange(this.minDate, this.maxDate, currentDate);
                    }
                    else {
                        hourMap[m] = isAllowed(h, m, this.minDate, this.maxDate, '24h');
                    }
                    this.allowed12HourMap[meridiem][hour] = hourMap;
                }
            }
        }
    };
    MatTimepickerDirective.prototype.ngOnChanges = function (simpleChanges) {
        this.pattern = this.mode === '24h' ? /^[0-9]{1,2}:?([0-9]{1,2})?$/ : /^[0-9]{1,2}:?([0-9]{1,2})?\s?(a|p)?m?$/;
        if ((simpleChanges.minDate && !simpleChanges.minDate.isFirstChange &&
            +simpleChanges.minDate.currentValue !== simpleChanges.minDate.previousValue) ||
            (simpleChanges.maxDate && !simpleChanges.maxDate.isFirstChange &&
                +simpleChanges.maxDate.currentValue !== simpleChanges.maxDate.previousValue) ||
            (simpleChanges.disableLimitBase && !simpleChanges.disableLimitBase.isFirstChange &&
                +simpleChanges.disableLimitBase.currentValue !== simpleChanges.disableLimitBase.previousValue)) {
            this.generateAllowedMap();
        }
        if (!this.modalRef || !this.modalRef.componentInstance) {
            return;
        }
        this.modalRef.componentInstance.data = {
            mode: this.mode,
            value: this.currentValue,
            okLabel: this.okLabel,
            cancelLabel: this.cancelLabel,
            color: this.color,
            isPm: this.isPm,
            minDate: this.minDate,
            maxDate: this.maxDate,
            allowed12HourMap: this.allowed12HourMap,
            allowed24HourMap: this.allowed24HourMap
        };
    };
    MatTimepickerDirective.prototype.checkValidity = function (value) {
        if (!value) {
            return false;
        }
        var hour = value.getHours();
        var minutes = value.getMinutes();
        var meridiem = this.isPm ? 'PM' : 'AM';
        return isAllowed(hour, minutes, this.minDate, this.maxDate, this.mode, meridiem);
    };
    MatTimepickerDirective.prototype.writeValue = function (value, isInnerCall) {
        var _this = this;
        if (isInnerCall === void 0) { isInnerCall = false; }
        if (!isInnerCall) {
            this._skipValueChangeEmission = true;
            Promise.resolve().then(function () { return _this._skipValueChangeEmission = false; });
        }
        if (value) {
            value.setSeconds(0);
            value.setMilliseconds(0);
        }
        if (+this.value !== +value) {
            this.value = value;
        }
    };
    MatTimepickerDirective.prototype.registerOnChange = function (fn) {
        this.onChangeFn = fn;
    };
    MatTimepickerDirective.prototype.registerOnTouched = function (fn) {
        this.onTouchedFn = fn;
    };
    MatTimepickerDirective.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
    };
    MatTimepickerDirective.prototype.showDialog = function () {
        var _this = this;
        if (this.disabled) {
            return;
        }
        this.isInputFocused = false;
        this.modalRef = this.dialog.open(MatTimepickerComponentDialogComponent, {
            autoFocus: false,
            data: {
                mode: this.mode,
                value: this.currentValue,
                okLabel: this.okLabel,
                cancelLabel: this.cancelLabel,
                color: this.color,
                isPm: this.isPm,
                minDate: this.minDate,
                maxDate: this.maxDate,
                allowed12HourMap: this.allowed12HourMap,
                allowed24HourMap: this.allowed24HourMap
            }
        });
        var instance = this.modalRef.componentInstance;
        instance.changeEvent.pipe(takeUntil(this.isAlive)).subscribe(this.handleChange);
        instance.okClickEvent.pipe(takeUntil(this.isAlive)).subscribe(this.handleOk);
        instance.cancelClickEvent.pipe(takeUntil(this.isAlive)).subscribe(this.handleCancel);
        this.modalRef.beforeClosed().pipe(first()).subscribe(function () { return instance.isClosing = true; });
        this.modalRef.afterClosed().pipe(first()).subscribe(function () {
            if (_this.onTouchedFn) {
                _this.onTouchedFn();
            }
            _this.modalRef = null;
            _this.elRef.nativeElement.focus();
        });
        this.currentValue = this.value;
    };
    MatTimepickerDirective.prototype.ngOnDestroy = function () {
        this.isAlive.next();
        this.isAlive.complete();
        this.stateChanges.complete();
        if (this._platform.isBrowser) {
            this.fm.stopMonitoring(this.elRef.nativeElement);
        }
        this.listeners.forEach(function (l) { return l(); });
    };
    var MatTimepickerDirective_1;
    MatTimepickerDirective.nextId = 0;
    MatTimepickerDirective.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },
        { type: MatDialog },
        { type: Renderer2 },
        { type: NgZone },
        { type: FocusMonitor },
        { type: ElementRef },
        { type: NgZone },
        { type: Platform },
        { type: NgForm, decorators: [{ type: Optional }] },
        { type: MatFormField, decorators: [{ type: Optional }] },
        { type: FormGroupDirective, decorators: [{ type: Optional }] },
        { type: ErrorStateMatcher }
    ]; };
    __decorate([
        Input()
    ], MatTimepickerDirective.prototype, "disabled", null);
    __decorate([
        Input()
    ], MatTimepickerDirective.prototype, "id", null);
    __decorate([
        Input()
    ], MatTimepickerDirective.prototype, "readonly", null);
    __decorate([
        HostBinding('class.floating')
    ], MatTimepickerDirective.prototype, "shouldLabelFloat", null);
    __decorate([
        HostBinding('attr.aria-describedby')
    ], MatTimepickerDirective.prototype, "describedBy", void 0);
    __decorate([
        Input()
    ], MatTimepickerDirective.prototype, "errorStateMatcher", void 0);
    __decorate([
        Input()
    ], MatTimepickerDirective.prototype, "required", null);
    __decorate([
        Input()
    ], MatTimepickerDirective.prototype, "placeholder", null);
    __decorate([
        Input()
    ], MatTimepickerDirective.prototype, "okLabel", void 0);
    __decorate([
        Input()
    ], MatTimepickerDirective.prototype, "cancelLabel", void 0);
    __decorate([
        Input()
    ], MatTimepickerDirective.prototype, "mode", void 0);
    __decorate([
        Input()
    ], MatTimepickerDirective.prototype, "color", void 0);
    __decorate([
        Input()
    ], MatTimepickerDirective.prototype, "disableDialogOpenOnClick", void 0);
    __decorate([
        Input()
    ], MatTimepickerDirective.prototype, "strict", void 0);
    __decorate([
        Input()
    ], MatTimepickerDirective.prototype, "minDate", void 0);
    __decorate([
        Input()
    ], MatTimepickerDirective.prototype, "maxDate", void 0);
    __decorate([
        Input()
    ], MatTimepickerDirective.prototype, "value", null);
    __decorate([
        Output()
    ], MatTimepickerDirective.prototype, "timeChange", void 0);
    __decorate([
        Output()
    ], MatTimepickerDirective.prototype, "invalidInput", void 0);
    __decorate([
        HostListener('input')
    ], MatTimepickerDirective.prototype, "inputHandler", null);
    __decorate([
        HostListener('keydown', ['$event'])
    ], MatTimepickerDirective.prototype, "keydownHandler", null);
    __decorate([
        HostListener('keyup', ['$event'])
    ], MatTimepickerDirective.prototype, "keyupHandler", null);
    __decorate([
        HostListener('focus')
    ], MatTimepickerDirective.prototype, "focusHandler", null);
    __decorate([
        HostListener('focusout')
    ], MatTimepickerDirective.prototype, "focusoutHandler", null);
    MatTimepickerDirective = MatTimepickerDirective_1 = __decorate([
        Directive({
            selector: 'input[matTimepicker]',
            providers: [
                { provide: MatFormFieldControl, useExisting: MatTimepickerDirective_1 }
            ],
            // tslint:disable-next-line:no-host-metadata-property
            host: {
                /**
                 * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.
                 */
                // tslint:disable-next-line:object-literal-key-quotes
                'class': 'mat-input-element mat-form-field-autofill-control',
                '[class.mat-input-server]': '_isServer',
                // Native input properties that are overwritten by Angular inputs need to be synced with
                // the native input element. Otherwise property bindings for those don't work.
                '[attr.id]': 'id',
                '[attr.placeholder]': 'placeholder',
                '[disabled]': 'disabled',
                '[required]': 'required',
                '[attr.readonly]': 'readonly || null',
                '[attr.aria-invalid]': 'errorState',
                '[attr.aria-required]': 'required.toString()',
            },
            exportAs: 'matTimepicker'
        }),
        __param(0, Optional()), __param(0, Self()),
        __param(8, Optional()),
        __param(9, Optional()),
        __param(10, Optional())
    ], MatTimepickerDirective);
    return MatTimepickerDirective;
}());
export { MatTimepickerDirective };
//# sourceMappingURL=data:application/json;base64,