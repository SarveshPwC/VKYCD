import { __decorate, __param } from "tslib";
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { Component, EventEmitter, Output, Inject } from '@angular/core';
import { twoDigits, convertHoursForMode } from '../util';
var MatTimepickerComponentDialogComponent = /** @class */ (function () {
    function MatTimepickerComponentDialogComponent(data) {
        this.data = data;
        this.twoDigits = twoDigits;
        this.changeEvent = new EventEmitter();
        this.okClickEvent = new EventEmitter();
        this.cancelClickEvent = new EventEmitter();
        this.allowed24HourMap = null;
        this.allowed12HourMap = null;
        this.invalidSelection = false;
        this.viewType = 'hours';
        this.isPm = false;
        this.skipMinuteAutoSwitch = false;
        this.autoSwitchID = null;
        this.invalidMedianID = null;
        this.hasInvalidMeridiem = false;
        this.editHoursClicked = false;
        this.isClosing = false;
        this.isPm = data.isPm;
        this.bindData(data);
        // keep this always at the bottom
        this.value = data.value;
    }
    Object.defineProperty(MatTimepickerComponentDialogComponent.prototype, "value", {
        get: function () { return this._value; },
        set: function (value) {
            value = value || this.minDate || this.maxDate || new Date();
            this.hours = value.getHours();
            this.minutes = value.getMinutes();
            this._value = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatTimepickerComponentDialogComponent.prototype, "hours", {
        get: function () { return this._hours; },
        set: function (value) {
            this._hours = value;
            this._formattedHour = convertHoursForMode(this.hours, this.mode).hour;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatTimepickerComponentDialogComponent.prototype, "formattedHours", {
        get: function () { return this._formattedHour; },
        enumerable: true,
        configurable: true
    });
    MatTimepickerComponentDialogComponent.prototype.bindData = function (data) {
        this.mode = data.mode;
        this.okLabel = data.okLabel;
        this.cancelLabel = data.cancelLabel;
        this.color = data.color;
        this.minDate = data.minDate;
        this.maxDate = data.maxDate;
        this.allowed12HourMap = data.allowed12HourMap;
        this.allowed24HourMap = data.allowed24HourMap;
    };
    MatTimepickerComponentDialogComponent.prototype.ngDoCheck = function () { this.bindData(this.data); };
    MatTimepickerComponentDialogComponent.prototype.handleClockChange = function (_a) {
        var value = _a.value, type = _a.type;
        var is24hoursAutoMeridiemChange = this.mode === '24h' && type === 'hours' && ((this.hours >= 12 && value < 12) || (this.hours < 12 && value >= 12));
        if ((this.hasInvalidMeridiem && this.mode === '12h') || is24hoursAutoMeridiemChange) {
            this.isPm = !this.isPm;
            this.hasInvalidMeridiem = false;
        }
        if ((type && type === 'hours') || (!type && this.viewType === 'hours')) {
            this.hours = value;
        }
        else if ((type && type === 'minutes') || (!type && this.viewType === 'minutes')) {
            this.minutes = value;
        }
        var newValue = new Date();
        var hours = this.isPm ? this.hours < 12 ? this.hours + 12 : this.hours : this.hours === 12 ? 0 : this.hours;
        newValue.setHours(hours);
        newValue.setMinutes(this.minutes);
        newValue.setSeconds(0);
        newValue.setMilliseconds(0);
        this.value = newValue;
        this.changeEvent.emit(newValue);
    };
    MatTimepickerComponentDialogComponent.prototype.clearInvalidMeridiem = function () {
        this.hasInvalidMeridiem = false;
    };
    MatTimepickerComponentDialogComponent.prototype.handleUnavailableSelection = function () {
        clearTimeout(this.autoSwitchID);
    };
    MatTimepickerComponentDialogComponent.prototype.handleClockChangeDone = function (e) {
        var _this = this;
        e.preventDefault(); // prevent mouseUp after touchEnd
        if (this.viewType === 'hours' && !this.skipMinuteAutoSwitch) {
            this.autoSwitchID = setTimeout(function () {
                _this.editMinutes();
                _this.autoSwitchID = null;
            }, 300);
        }
    };
    MatTimepickerComponentDialogComponent.prototype.editHours = function () {
        var _this = this;
        this.viewType = 'hours';
        this.editHoursClicked = true;
        setTimeout(function () { _this.editHoursClicked = false; }, 0);
    };
    MatTimepickerComponentDialogComponent.prototype.editMinutes = function () {
        if (this.hasInvalidMeridiem) {
            this.isPm = !this.isPm;
            this.hasInvalidMeridiem = false;
        }
        this.viewType = 'minutes';
    };
    MatTimepickerComponentDialogComponent.prototype.invalidSelectionHandler = function (value) {
        this.invalidSelection = value;
    };
    MatTimepickerComponentDialogComponent.prototype.invalidMeridiem = function () {
        var _this = this;
        if (this.viewType !== 'minutes' && this.editHoursClicked) {
            if (this.invalidMedianID) {
                return;
            }
            this.invalidMedianID = setTimeout(function () {
                _this.isPm = !_this.isPm;
                _this.hasInvalidMeridiem = false;
            }, 0);
            return;
        }
        this.hasInvalidMeridiem = true;
    };
    MatTimepickerComponentDialogComponent.prototype.meridiemChange = function (hours) {
        var changeData = {
            type: this.viewType,
            value: this.viewType === 'hours' ? hours : this.value.getMinutes()
        };
        this.handleClockChange(changeData);
    };
    MatTimepickerComponentDialogComponent.prototype.setAm = function () {
        if (this.hours >= 12) {
            this.hours = this.hours - 12;
        }
        this.isPm = false;
        this.meridiemChange(this.hours);
    };
    MatTimepickerComponentDialogComponent.prototype.setPm = function () {
        if (this.hours < 12) {
            this.hours = this.hours + 12;
        }
        this.isPm = true;
        this.meridiemChange(this.hours);
    };
    MatTimepickerComponentDialogComponent.prototype.okClickHandler = function () {
        if (this.hasInvalidMeridiem) {
            this.isPm = !this.isPm;
            this.hasInvalidMeridiem = false;
        }
        this.okClickEvent.emit();
    };
    MatTimepickerComponentDialogComponent.prototype.cancelClickHandler = function () {
        this.cancelClickEvent.emit();
    };
    MatTimepickerComponentDialogComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    __decorate([
        Output()
    ], MatTimepickerComponentDialogComponent.prototype, "changeEvent", void 0);
    __decorate([
        Output()
    ], MatTimepickerComponentDialogComponent.prototype, "okClickEvent", void 0);
    __decorate([
        Output()
    ], MatTimepickerComponentDialogComponent.prototype, "cancelClickEvent", void 0);
    MatTimepickerComponentDialogComponent = __decorate([
        Component({
            selector: 'mat-timepicker-dialog',
            template: "<mat-dialog-content>\n  <div class=\"root\">\n    <mat-toolbar [color]=\"color\" class=\"header\">\n      <div class=\"placeholder\"></div>\n      <div class=\"time-frame\">\n        <span class=\"time fixed-font-size\" [ngClass]=\"{'select': this.viewType === 'hours' && 'active' }\"\n          (click)=\"editHours()\">\n          {{ twoDigits(formattedHours) }}\n        </span>\n        <span class=\"fixed-font-size\">:</span>\n        <span class=\"time fixed-font-size\" [ngClass]=\"{ 'select': this.viewType === 'minutes' && 'active' }\"\n          (click)=\"editMinutes()\">\n          {{ twoDigits(minutes) }}\n        </span>\n      </div>\n      <ng-container *ngIf=\"mode === '12h' then ampm else normal\"></ng-container>\n      <ng-template #normal>\n        <div class=\"placeholder\"></div>\n      </ng-template>\n      <ng-template #ampm>\n        <div class=\"ampm\">\n          <span class=\"time\" [ngClass]=\"{ 'select': isPm }\" (click)=\"setPm()\">PM</span>\n          <span class=\"time\" [ngClass]=\"{ 'select': !isPm }\" (click)=\"setAm()\">AM</span>\n        </div>\n      </ng-template>\n    </mat-toolbar>\n    <div class=\"body\">\n      <mat-clock [allowed12HourMap]=\"allowed12HourMap\" [allowed24HourMap]=\"allowed24HourMap\" [minDate]=\"minDate\"\n        [maxDate]=\"maxDate\" [color]=\"color\" [viewType]=\"viewType\" [mode]=\"mode\" [formattedHours]=\"formattedHours\"\n        [minutes]=\"minutes\" (changeEvent)=\"handleClockChange($event)\"\n        (unavailableSelection)=\"handleUnavailableSelection()\"\n        [formattedValue]=\"viewType === 'minutes' ? minutes : formattedHours\" [isPm]=\"isPm\"\n        (invalidMeridiem)=\"invalidMeridiem()\" (mouseup)=\"handleClockChangeDone($event)\"\n        (clearInvalidMeridiem)=\"clearInvalidMeridiem()\" (touchend)=\"handleClockChangeDone($event)\"\n        (invalidSelection)=\"invalidSelectionHandler($event)\"></mat-clock>\n    </div>\n  </div>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button i18n=\"mat-timepicker|Material Timepicker Cancel Button Text\" [color]=\"color\"\n    (click)=\"cancelClickHandler()\">{{cancelLabel}}</button>\n  <button mat-button i18n=\"mat-timepicker|Material Timepicker Ok Button Text\" [disabled]=\"invalidSelection\"\n    [color]=\"color\" (click)=\"okClickHandler()\">{{okLabel}}</button>\n</mat-dialog-actions>",
            styles: ["mat-dialog-content{min-height:395px;padding:0;margin-top:-24px;overflow:hidden}mat-dialog-actions{justify-content:flex-end;margin-right:-8px;margin-left:-8px}.root{min-width:282px}.header{border-top-left-radius:2px;border-top-right-radius:2px;padding:20px 0;line-height:58px;font-size:58px;display:flex;justify-content:center;align-items:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;height:98px}.header .fixed-font-size{font-size:58px}.header .time-frame{height:60px}.time{transition:.2s ease-out;cursor:pointer}.time:not(.select){opacity:.6}.placeholder{flex:1}.ampm{display:flex;flex-direction:column-reverse;flex:1;font-size:14px;line-height:20px;margin-left:16px;font-weight:700px}.select{color:#fff}.body{padding:24px 16px 20px;display:flex;justify-content:center}"]
        }),
        __param(0, Inject(MAT_DIALOG_DATA))
    ], MatTimepickerComponentDialogComponent);
    return MatTimepickerComponentDialogComponent;
}());
export { MatTimepickerComponentDialogComponent };
//# sourceMappingURL=data:application/json;base64,