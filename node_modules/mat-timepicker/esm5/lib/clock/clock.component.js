import { __decorate } from "tslib";
import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { getIsAvailabeFn } from '../util';
var ClockComponent = /** @class */ (function () {
    function ClockComponent() {
        var _this = this;
        this.color = 'primary';
        this.changeEvent = new EventEmitter();
        this.unavailableSelection = new EventEmitter();
        this.invalidMeridiem = new EventEmitter();
        this.invalidSelection = new EventEmitter();
        this.clearInvalidMeridiem = new EventEmitter();
        this.allowed12HourMap = null;
        this.allowed24HourMap = null;
        this.isFormattedValueAllowed = true;
        this.meridiem = null;
        this.touching = false;
        this.numbers = [];
        this.secondaryNumbers = [];
        this.minuteDots = [];
        this.invalidMeridiemEmitted = true;
        this.handleTouchMove = function (e) {
            e.preventDefault(); // prevent scrolling behind the clock on iOS
            var rect = e.target.getBoundingClientRect();
            _this.movePointer(e.changedTouches[0].clientX - rect.left, e.changedTouches[0].clientY - rect.top);
        };
    }
    ClockComponent.prototype.initIsAllowedFn = function () {
        if (!this.allowed12HourMap && !this.allowed24HourMap) {
            return;
        }
        this.isAvailableFn = getIsAvailabeFn(this.allowed12HourMap, this.allowed24HourMap, this.mode);
    };
    ClockComponent.prototype.isAvailable = function (value) {
        return this.isAvailableFn ? this.isAvailableFn(value, this.viewType, this.isPm, this.formattedHours) : true;
    };
    ClockComponent.prototype.ngOnChanges = function (simpleChanges) {
        var _this = this;
        if (simpleChanges.allowed12HourMap ||
            simpleChanges.allowed24HourMap ||
            (simpleChanges.mode && !simpleChanges.mode.firstChange)) {
            this.initIsAllowedFn();
        }
        this.calculateAngule();
        this.setNumbers();
        this.meridiem = this.isPm ? 'PM' : 'AM';
        if (simpleChanges.formattedValue && (this.allowed12HourMap || this.allowed24HourMap)) {
            this.isFormattedValueAllowed = this.isAvailable(this.formattedValue);
        }
        var isSelectedTimeAvailable = (this.isAvailableFn) ?
            this.isAvailableFn(this.formattedValue, 'minutes', this.isPm, this.formattedHours) : true;
        if (this.mode === '24h' && this.viewType === 'minutes' && this.isAvailableFn) {
            var areMinitesAvailable = this.isAvailableFn(this.minutes, 'minutes', this.isPm, this.formattedHours);
            if (!areMinitesAvailable) {
                if (this.minDate && this.minDate.getMinutes() > this.minutes) {
                    setTimeout(function () { _this.changeEvent.emit({ value: _this.minDate.getMinutes(), type: 'minutes' }); });
                }
                else {
                    setTimeout(function () { _this.changeEvent.emit({ value: _this.maxDate.getMinutes(), type: 'minutes' }); });
                }
            }
        }
        if (isSelectedTimeAvailable && this.invalidMeridiemEmitted) {
            this.clearInvalidMeridiem.emit();
            this.invalidMeridiemEmitted = false;
        }
        this.invalidSelection.emit(!isSelectedTimeAvailable);
    };
    ClockComponent.prototype.calculateAngule = function () {
        this.angle = this.getPointerAngle(this.formattedValue, this.viewType);
    };
    ClockComponent.prototype.setNumbers = function () {
        var _this = this;
        if (this.viewType === 'hours') {
            if (this.mode === '12h') {
                var meridiem_1 = this.isPm ? 'pm' : 'am';
                var isAllowedFn = this.allowed12HourMap ? function (num) { return _this.allowed12HourMap[meridiem_1][num + 1][0]; } : undefined;
                this.numbers = this.getNumbers(12, { size: 256 }, isAllowedFn);
                this.secondaryNumbers = [];
                this.minuteDots = [];
            }
            else if (this.mode === '24h') {
                var isAllowedFn = this.allowed24HourMap ? function (num) { return _this.allowed24HourMap[num][0]; } : undefined;
                this.numbers = this.getNumbers(12, { size: 256 }, isAllowedFn);
                this.secondaryNumbers = this.getNumbers(12, { size: 256 - 64, start: 13 }, isAllowedFn);
                this.minuteDots = [];
            }
        }
        else {
            var meridiem_2 = this.isPm ? 'pm' : 'am';
            var isAllowedFn_1 = !!this.allowed12HourMap ? function (num) { return _this.allowed12HourMap[meridiem_2][_this.formattedHours][num]; } :
                !!this.allowed24HourMap ? function (num) { return _this.allowed24HourMap[_this.formattedHours][num]; } : undefined;
            this.numbers = this.getNumbers(12, { size: 256, start: 5, step: 5 }, isAllowedFn_1);
            this.minuteDots = this.getNumbers(60, { size: 256, start: 13 }).map(function (digit) {
                if (digit.display <= 59) {
                    digit.allowed = isAllowedFn_1 ? isAllowedFn_1(digit.display) : true;
                    return digit;
                }
                digit.display = digit.display - 60;
                digit.allowed = isAllowedFn_1 ? isAllowedFn_1(digit.display) : true;
                return digit;
            });
            this.secondaryNumbers = [];
        }
    };
    ClockComponent.prototype.disableAnimatedPointer = function () {
        this.touching = true;
    };
    ClockComponent.prototype.enableAnimatedPointer = function () {
        this.touching = false;
    };
    ClockComponent.prototype.handleTouchEnd = function (e) {
        this.handleTouchMove(e);
        this.enableAnimatedPointer();
    };
    ClockComponent.prototype.handleMouseMove = function (e) {
        // MouseEvent.which is deprecated, but MouseEvent.buttons is not supported in Safari
        if (e.buttons === 1 || e.which === 1) {
            var rect = e.target.getBoundingClientRect();
            this.movePointer(e.clientX - rect.left, e.clientY - rect.top);
        }
    };
    ClockComponent.prototype.handleClick = function (e) {
        var rect = e.target.getBoundingClientRect();
        this.movePointer(e.clientX - rect.left, e.clientY - rect.top);
    };
    ClockComponent.prototype.movePointer = function (x, y) {
        var value = this.getPointerValue(x, y, 256);
        if (!this.isAvailable(value)) {
            this.unavailableSelection.emit();
            return;
        }
        if (value !== this.formattedValue) {
            this.changeEvent.emit({ value: value, type: this.viewType !== 'minutes' ? 'hours' : 'minutes' });
            if (this.viewType !== 'minutes') {
                if (!this.isAvailable(value)) {
                    if (this.minDate && this.isAvailable(value)) {
                        this.changeEvent.emit({ value: this.minDate.getMinutes(), type: 'minutes' });
                    }
                    else if (this.maxDate && this.isAvailable(value)) {
                        this.changeEvent.emit({ value: this.maxDate.getMinutes(), type: 'minutes' });
                    }
                }
            }
        }
    };
    ClockComponent.prototype.getNumbers = function (count, _a, isAllowedFn) {
        var size = _a.size, _b = _a.start, start = _b === void 0 ? 1 : _b, _c = _a.step, step = _c === void 0 ? 1 : _c;
        return Array.apply(null, Array(count)).map(function (_, i) { return ({
            display: i * step + start,
            translateX: (size / 2 - 20) * Math.cos(2 * Math.PI * (i - 2) / count),
            translateY: (size / 2 - 20) * Math.sin(2 * Math.PI * (i - 2) / count),
            allowed: isAllowedFn ? isAllowedFn(i) : true
        }); });
    };
    ClockComponent.prototype.getPointerAngle = function (value, mode) {
        if (this.viewType === 'hours') {
            return this.mode === '12h' ? 360 / 12 * (value - 3) : 360 / 12 * (value % 12 - 3);
        }
        return 360 / 60 * (value - 15);
    };
    ClockComponent.prototype.getPointerValue = function (x, y, size) {
        var value;
        var angle = Math.atan2(size / 2 - x, size / 2 - y) / Math.PI * 180;
        if (angle < 0) {
            angle = 360 + angle;
        }
        if (this.viewType === 'hours') {
            if (this.mode === '12h') {
                value = 12 - Math.round(angle * 12 / 360);
                return value === 0 ? 12 : value;
            }
            var radius = Math.sqrt(Math.pow(size / 2 - x, 2) + Math.pow(size / 2 - y, 2));
            value = 12 - Math.round(angle * 12 / 360);
            if (value === 0) {
                value = 12;
            }
            if (radius < size / 2 - 32) {
                value = value === 12 ? 0 : value + 12;
            }
            return value;
        }
        value = Math.round(60 - 60 * angle / 360);
        return value === 60 ? 0 : value;
    };
    __decorate([
        Input()
    ], ClockComponent.prototype, "mode", void 0);
    __decorate([
        Input()
    ], ClockComponent.prototype, "viewType", void 0);
    __decorate([
        Input()
    ], ClockComponent.prototype, "color", void 0);
    __decorate([
        Input()
    ], ClockComponent.prototype, "formattedValue", void 0);
    __decorate([
        Input()
    ], ClockComponent.prototype, "minDate", void 0);
    __decorate([
        Input()
    ], ClockComponent.prototype, "maxDate", void 0);
    __decorate([
        Input()
    ], ClockComponent.prototype, "isPm", void 0);
    __decorate([
        Input()
    ], ClockComponent.prototype, "formattedHours", void 0);
    __decorate([
        Input()
    ], ClockComponent.prototype, "minutes", void 0);
    __decorate([
        Output()
    ], ClockComponent.prototype, "changeEvent", void 0);
    __decorate([
        Output()
    ], ClockComponent.prototype, "unavailableSelection", void 0);
    __decorate([
        Output()
    ], ClockComponent.prototype, "invalidMeridiem", void 0);
    __decorate([
        Output()
    ], ClockComponent.prototype, "invalidSelection", void 0);
    __decorate([
        Output()
    ], ClockComponent.prototype, "clearInvalidMeridiem", void 0);
    __decorate([
        Input()
    ], ClockComponent.prototype, "allowed12HourMap", void 0);
    __decorate([
        Input()
    ], ClockComponent.prototype, "allowed24HourMap", void 0);
    ClockComponent = __decorate([
        Component({
            selector: 'mat-clock',
            template: "<div class=\"root\">\n  <div class=\"circle\" (touchmove)=\"handleTouchMove($event)\" (mousemove)=\"handleMouseMove($event)\"\n    (touchstart)=\"disableAnimatedPointer()\" (mousedown)=\"disableAnimatedPointer()\" (touchend)=\"handleTouchEnd($event)\"\n    (mouseup)=\"enableAnimatedPointer()\" (click)=\"handleClick($event)\">\n    <div class=\"pointer-container\"\n      [ngClass]=\"{ 'small-pointer': mode === '24h' && viewType === 'hours' && (formattedValue === 0 || formattedValue > 12), 'animated-pointer': !touching }\"\n      [style.transform]=\"'rotate(' + angle + 'deg)'\">\n      <button mat-mini-fab [color]=\"color\" class=\"inner-dot\"></button>\n      <mat-toolbar [color]=\"color\" class=\"pointer\">\n        <button mat-mini-fab [color]=\"color\" class=\"outer-dot\"\n          [ngClass]=\" { 'outer-dot-odd': viewType === 'minutes' && formattedValue % 5 !== 0 }\">\n          <ng-container *ngIf=\"viewType === 'minutes' && formattedValue % 5 !== 0\">\u00B7</ng-container>\n        </button>\n      </mat-toolbar>\n    </div>\n    <ng-container *ngFor=\"let digit of minuteDots;\">\n      <button mat-mini-fab class=\"number minute-dot\"\n        [ngClass]=\"{ 'selected': formattedValue === digit.display || (digit.display === 0 && formattedValue === 0), 'disabled': !isAvailable(digit.display === 60 ? 0 : digit.display)}\"\n        [style.transform]=\"'translate(' + digit.translateX + 'px, ' + digit.translateY + 'px)'\">\n        <ng-container *ngIf=\"digit.display % 5 !== 0\">\u00B7</ng-container>\n      </button>\n    </ng-container>\n    <ng-container *ngFor=\"let digit of numbers;\">\n      <button mat-mini-fab [color]=\"color\" class=\"number\"\n        [ngClass]=\"{ 'selected': formattedValue === digit.display || (digit.display === 60 && formattedValue === 0), 'disabled': !isAvailable(digit.display === 60 ? 0 : digit.display)}\"\n        [style.transform]=\"'translate(' + digit.translateX + 'px, ' + digit.translateY + 'px)'\">\n        <ng-template #hoursTemplate>{{ digit.display }}</ng-template>\n        <ng-template #minutesTemplate>{{ digit.display === 60 ? '00' : digit.display }}</ng-template>\n        <ng-container *ngIf=\"viewType === 'minutes' then minutesTemplate else hoursTemplate;\"></ng-container>\n      </button>\n\n    </ng-container>\n    <ng-container *ngFor=\"let digit of secondaryNumbers;\">\n      <button mat-mini-fab [color]=\"color\" class=\"number small-number\"\n        [ngClass]=\"{ 'selected': formattedValue === digit.display || (digit.display === 24 && formattedValue === 0), 'disabled': !isAvailable(digit.display === 24 ? 0 : digit.display)}\"\n        [style.transform]=\"'translate(' + digit.translateX + 'px, ' + digit.translateY + 'px)'\">\n        {{ digit.display === 24 ? '00' : digit.display }}\n      </button>\n\n    </ng-container>\n  </div>",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [".root{width:256px;height:256px;cursor:default}.circle{width:256px;height:256px;border-radius:50%;position:relative;background:#ededed;cursor:pointer}.number{width:32px;height:32px;left:calc(50% - 16px);top:calc(50% - 16px);position:absolute;text-align:center;line-height:32px;cursor:pointer;font-size:14px;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:flex;align-items:center;justify-content:center;flex-direction:column;background-color:transparent;box-shadow:none}.number.disabled{color:rgba(1,1,1,.1)}.number:not(.selected):not(.disabled){color:rgba(0,0,0,.87)}.number:not(.disabled).minute-dot{color:rgba(1,1,1,.7)}.number:not(.disabled).minute-dot.selected{color:transparent}.small-number{font-size:12px}.small-number:not(.selected):not(.disabled){color:rgba(0,0,0,.67)}.pointer-container{width:calc(50% - 20px);height:2;position:absolute;left:50%;top:calc(50% - 1px);transform-origin:left center;pointer-events:none}.pointer-container.disabled *{background-color:transparent}.pointer{height:1px}.animated-pointer{transition:.2s ease-out}.small-pointer{width:calc(50% - 52px)}.inner-dot{position:absolute;top:-3px;left:-4px;width:8px;height:8px;border-radius:50%;box-shadow:none}.outer-dot{width:32px;height:32px;position:absolute;right:-16px;box-shadow:none;border-radius:50%;box-sizing:content-box}.outer-dot-odd{box-shadow:none;width:32px;height:32px;display:flex;align-items:center;justify-content:center;flex-direction:column}"]
        })
    ], ClockComponent);
    return ClockComponent;
}());
export { ClockComponent };
//# sourceMappingURL=data:application/json;base64,